// (5)
def ssh_publisher(SERVER_CONFIG, PROJECT_NAME) {
    sshPublisher(
        continueOnError: false,
        failOnError: true,
        publishers:[
            sshPublisherDesc(
                configName: "${SERVER_CONFIG}",
                verbose: true,
                transfers: [
                    // (5.1) Copy script files
                    sshTransfer(
                        sourceFiles: "**/deploy/develop/script/*.sh",
                        removePrefix: "deploy/develop/script",
                        remoteDirectory: "/${PROJECT_NAME}/build/script"
                    ),
                    //(5.2) Copy build files
                    sshTransfer(
                        sourceFiles: "**/build/libs/*.jar",
                        removePrefix: "build/libs",
                        remoteDirectory: "/${PROJECT_NAME}",
                        // Absolute path.
                        execCommand: "sh /home/${PROJECT_NAME}/build/script/deploy_server.sh"
                    )
                ]
            )
        ]
    )
}

// (1)
pipeline {
    agent any

    tools {
        jdk('OpenJDK-17')
    }

    environment {
        // (2) Registered in Jenkins
        SERVER_LIST = "ebmp-dev"
        PROJECT_NAME = "ebmp-proj-standard-api"
    }
    stages {
        stage("Set Variable") {
            steps {
                script {
                    SLACK_CHANNEL = "#noti_jenkins"
                    SLACK_START_COLOR = "#b5d1ff";
                    SLACK_SUCCESS_COLOR = "#2C953C";
                    SLACK_FAIL_COLOR = "#FF3232";
                    env.COMMIT_MSG = sh (script: 'git log ${GIT_PREVIOUS_SUCCESSFUL_COMMIT}..${GIT_COMMIT} --pretty=format:" - [%cn] %B"', returnStdout: true).trim()
                }
            }
            post {
              success {
                  slackSend (
                      channel: SLACK_CHANNEL,
                      color: SLACK_START_COLOR,
                      message: ":bell: ${env.JOB_NAME} - #${env.BUILD_NUMBER} ${currentBuild.getBuildCauses()[0].shortDescription} - ( <${env.BUILD_URL}|Link> )\n ${env.COMMIT_MSG}"
                  )
              }
            }
        }
        stage("Build") {
        	// (3)
            steps {
                sh "chmod +x gradlew"
                sh "./gradlew clean build -Dgradle.user.home=$HOME/gradle/wrapper -Dorg.gradle.daemon=true -Dorg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 -Dorg.gradle.configureondemand=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
            }
        }

        stage("Deploy") {
            steps {
                echo "deploy.."
                echo "${SERVER_LIST}"

                script {
                	// (4)
                    SERVER_LIST.tokenize(',').each {
                        echo "SERVER: ${it}"
                        ssh_publisher("${it}","${PROJECT_NAME}")
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend (
                channel: SLACK_CHANNEL,
                color: SLACK_SUCCESS_COLOR,
                message: ":white_check_mark: ${env.JOB_NAME} - #${env.BUILD_NUMBER} Success after ${currentBuild.durationString} - ( <${env.BUILD_URL}|Link> )"
            )
        }
        failure {
            slackSend (
                channel: SLACK_CHANNEL,
                color: SLACK_FAIL_COLOR,
                message: ":x: ${env.JOB_NAME} - #${env.BUILD_NUMBER} Fail after ${currentBuild.durationString} - ( <${env.BUILD_URL}|Link> )"
            )
        }
    }
}
