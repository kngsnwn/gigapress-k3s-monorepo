# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: gigapress

---
# PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "gigapress"
        - name: POSTGRES_USER
          value: "gigapress"
        - name: POSTGRES_PASSWORD
          value: "gigapress123"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: gigapress
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: gigapress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
# Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: gigapress
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Kafka (simplified single-node setup)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:9092"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        ports:
        - containerPort: 9092

---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: gigapress
spec:
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092

---
# Zookeeper
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        ports:
        - containerPort: 2181

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: gigapress
spec:
  selector:
    app: zookeeper
  ports:
  - port: 2181
    targetPort: 2181

---
# Neo4j
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neo4j
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - name: neo4j
        image: neo4j:5.11
        env:
        - name: NEO4J_AUTH
          value: "neo4j/gigapress123"
        - name: NEO4J_dbms_memory_pagecache_size
          value: "512M"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "512M"
        ports:
        - containerPort: 7474
        - containerPort: 7687

---
apiVersion: v1
kind: Service
metadata:
  name: neo4j
  namespace: gigapress
spec:
  selector:
    app: neo4j
  ports:
  - name: http
    port: 7474
    targetPort: 7474
  - name: bolt
    port: 7687
    targetPort: 7687

---
# Domain Schema Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: domain-schema-service
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: domain-schema-service
  template:
    metadata:
      labels:
        app: domain-schema-service
    spec:
      containers:
      - name: domain-schema-service
        image: domain-schema-service:latest
        imagePullPolicy: Never
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "docker"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/gigapress"
        - name: SPRING_DATASOURCE_USERNAME
          value: "gigapress"
        - name: SPRING_DATASOURCE_PASSWORD
          value: "gigapress123"
        - name: SPRING_REDIS_HOST
          value: "redis"
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        ports:
        - containerPort: 8083

---
apiVersion: v1
kind: Service
metadata:
  name: domain-schema-service
  namespace: gigapress
spec:
  selector:
    app: domain-schema-service
  ports:
  - port: 8083
    targetPort: 8083

---
# Backend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-service
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-service
  template:
    metadata:
      labels:
        app: backend-service
    spec:
      containers:
      - name: backend-service
        image: backend-service:latest
        imagePullPolicy: Never
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "docker"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/gigapress"
        - name: SPRING_DATASOURCE_USERNAME
          value: "gigapress"
        - name: SPRING_DATASOURCE_PASSWORD
          value: "gigapress123"
        - name: SPRING_REDIS_HOST
          value: "redis"
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: DOMAIN_SCHEMA_SERVICE_URL
          value: "http://domain-schema-service:8083"
        ports:
        - containerPort: 8084

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: gigapress
spec:
  selector:
    app: backend-service
  ports:
  - port: 8084
    targetPort: 8084

---
# Conversational AI Engine
apiVersion: apps/v1
kind: Deployment
metadata:
  name: conversational-ai-engine
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: conversational-ai-engine
  template:
    metadata:
      labels:
        app: conversational-ai-engine
    spec:
      containers:
      - name: conversational-ai-engine
        image: conversational-ai-engine:latest
        imagePullPolicy: Never
        env:
        - name: ENVIRONMENT
          value: "docker"
        - name: REDIS_HOST
          value: "redis"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: NEO4J_URI
          value: "bolt://neo4j:7687"
        - name: NEO4J_USER
          value: "neo4j"
        - name: NEO4J_PASSWORD
          value: "gigapress123"
        - name: BACKEND_SERVICE_URL
          value: "http://backend-service:8084"
        - name: DOMAIN_SCHEMA_SERVICE_URL
          value: "http://domain-schema-service:8083"
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: gigapress-secrets
              key: anthropic-api-key
        ports:
        - containerPort: 8087

---
apiVersion: v1
kind: Service
metadata:
  name: conversational-ai-engine
  namespace: gigapress
spec:
  selector:
    app: conversational-ai-engine
  ports:
  - port: 8087
    targetPort: 8087

---
# Conversational Layer (Frontend)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: conversational-layer
  namespace: gigapress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: conversational-layer
  template:
    metadata:
      labels:
        app: conversational-layer
    spec:
      containers:
      - name: conversational-layer
        image: conversational-layer:latest
        imagePullPolicy: Never
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_API_URL
          value: "http://conversational-ai-engine:8087"
        - name: NEXT_PUBLIC_WS_URL
          value: "ws://conversational-ai-engine:8087"
        ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: conversational-layer
  namespace: gigapress
spec:
  selector:
    app: conversational-layer
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30082
  type: NodePort

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gigapress-ingress
  namespace: gigapress
  annotations:
    kubernetes.io/ingress.class: "traefik"
spec:
  rules:
  - host: gigapress.kngsnwn.duckdns.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: conversational-layer
            port:
              number: 8080

---
# Secret for API keys
apiVersion: v1
kind: Secret
metadata:
  name: gigapress-secrets
  namespace: gigapress
type: Opaque
data:
  anthropic-api-key: # base64 encoded API key - 배포 시 설정 필요