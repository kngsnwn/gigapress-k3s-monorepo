version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: gigapress-postgres
    environment:
      POSTGRES_DB: gigapress
      POSTGRES_USER: gigapress
      POSTGRES_PASSWORD: gigapress123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gigapress-network

  neo4j:
    image: neo4j:5.11
    container_name: gigapress-neo4j
    environment:
      NEO4J_AUTH: neo4j/gigapress123
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_memory_heap_max__size: 1G
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    networks:
      - gigapress-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: gigapress-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - gigapress-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: gigapress-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - gigapress-network

  redis:
    image: redis:7-alpine
    container_name: gigapress-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gigapress-network

  # Application Services
  domain-schema-service:
    build: ./domain-schema-service
    container_name: domain-schema-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/gigapress
      SPRING_DATASOURCE_USERNAME: gigapress
      SPRING_DATASOURCE_PASSWORD: gigapress123
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - gigapress-network

  backend-service:
    build: ./backend-service
    container_name: backend-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/gigapress
      SPRING_DATASOURCE_USERNAME: gigapress
      SPRING_DATASOURCE_PASSWORD: gigapress123
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DOMAIN_SCHEMA_SERVICE_URL: http://domain-schema-service:8083
    depends_on:
      - postgres
      - redis
      - kafka
      - domain-schema-service
    networks:
      - gigapress-network

  conversational-ai-engine:
    build: ./conversational-ai-engine
    container_name: conversational-ai-engine
    ports:
      - "8087:8087"
    environment:
      ENVIRONMENT: docker
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: gigapress123
      BACKEND_SERVICE_URL: http://backend-service:8084
      DOMAIN_SCHEMA_SERVICE_URL: http://domain-schema-service:8083
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    depends_on:
      - redis
      - kafka
      - neo4j
      - backend-service
    networks:
      - gigapress-network

  conversational-layer:
    build: ./conversational-layer
    container_name: conversational-layer
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8087
      NEXT_PUBLIC_WS_URL: ws://localhost:8087
    depends_on:
      - conversational-ai-engine
    networks:
      - gigapress-network

volumes:
  postgres_data:
  neo4j_data:
  kafka_data:
  redis_data:

networks:
  gigapress-network:
    driver: bridge